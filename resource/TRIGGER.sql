-- TRIGGER FOR CHECKING A PERSON WHETHER GIVE A LIKE ON THE POST AGAIN 

CREATE OR REPLACE FUNCTION GET_UPDATED_SP() RETURNS TRIGGER AS $RECORD$
DECLARE 
S NUMERIC;
BEGIN
SELECT AVG("RATING") INTO S FROM "RECORD" GROUP BY SP_ID HAVING SP_ID=NEW.SP_ID; 
UPDATE "SERVICE_PROVIDER" SET "RATING"=S ,"IS_IDLE"=TRUE WHERE "PHONE"=NEW.SP_ID;
RETURN NEW;
END;
$RECORD$ LANGUAGE plpgsql;

CREATE TRIGGER UPDATE_SP AFTER UPDATE ON "RECORD"
FOR EACH ROW EXECUTE PROCEDURE GET_UPDATED_SP();



CREATE OR REPLACE FUNCTION GET_UPDATED_SP() RETURNS TRIGGER AS $RECORD$
DECLARE 
S NUMERIC;
BEGIN
SELECT AVG("USER_RATING") INTO S FROM "RECORD" GROUP BY "SP_ID" HAVING "SP_ID"=NEW."SP_ID"; 
--SELECT * FROM "RECORD";
UPDATE "SERVICE_PROVIDER" SET "RATING"=S ,"IS_IDLE"=TRUE WHERE "PHONE"=NEW."SP_ID";
RETURN NEW;
END;
$RECORD$ LANGUAGE plpgsql;

CREATE TRIGGER UPDATE_SP AFTER UPDATE ON "RECORD"
FOR EACH ROW EXECUTE PROCEDURE GET_UPDATED_SP();


UPDATE "RECORD" SET "USER_RATING"=4.9, "FINISH_TIME"=CURRENT_TIMESTAMP WHERE "OID"=103;
SELECT * FROM "RECORD";
INSERT INTO "RECORD" ("OID","USER_ID","SP_ID","START_TIME") VALUES(103,1733202506,1736598974,CURRENT_TIMESTAMP);
INSERT INTO "ACCOUNT" VALUES(1733202506,0);
UPDATE "ACCOUNT" SET "AMOUNT"=0.0 WHERE "PHONE"=01733202506;


CREATE OR REPLACE FUNCTION RECORD_ENTRY() RETURNS TRIGGER AS $RECORD$
DECLARE
BEGIN
INSERT INTO "RECORD" ("OID","USER_ID","SP_ID","START_TIME","COST") 
VALUES (NEW."OID",NEW."USER_ID",NEW."SERVICE_PROVIDER",CURRENT_TIMESTAMP,NEW."COST");
RETURN NEW;
END;
$RECORD$ LANGUAGE plpgsql;

CREATE TRIGGER COMMENT_NOTIFICATION_TRIGGER AFTER UPDATE ON "ORDER"
FOR EACH ROW EXECUTE PROCEDURE RECORD_ENTRY();




CREATE OR REPLACE FUNCTION ENOUGH_BALANCE(OID INTEGER)
RETURNS BOOLEAN AS $YN$
declare
	YN BOOLEAN;
	TK INTEGER;
	B NUMERIC;
BEGIN
   SELECT "COST" INTO TK FROM "ORDER" WHERE "OID"=OID;
   SELECT "AMOUNT" INTO B FROM "ACCOUNT" WHERE "PHONE"=(SELECT "USER_ID" FROM "ORDER" WHERE "OID"=OID);
   IF TK>B THEN
   YN=FALSE;
   ELSE YN=TRUE;
   END IF;
   RETURN YN;
END;
$YN$ LANGUAGE plpgsql;